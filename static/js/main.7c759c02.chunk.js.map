{"version":3,"sources":["load-data/RSS_FEEDS.js","load-data/index.js","App.js","serviceWorker.js","index.js"],"names":["RSS_FEEDS","value","label","module","exports","Parser","require","parser","fetchDataFromFeed","rssFeedEndPoint","a","parseURL","asyncForEach","array","callback","index","length","getDataFromFeed","result","rssFeed","feed","items","map","item","display","brand","title","newFeedItems","concat","console","log","App","props","handleSearch","e","searchRssFeed","target","searchValue","rssFeedResults","state","feedItems","toLowerCase","includes","contentSnippet","setState","images","self","this","Promise","resolve","then","data","feedTitle","error","Item","key","link","xl","lg","md","sm","xs","pubDate","href","rel","dangerouslySetInnerHTML","__html","content","className","author","variant","Header","Prepend","Text","id","icon","faSearch","placeholder","aria-label","aria-describedby","onChange","style","height","overflow","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c759c02.chunk.js","sourcesContent":["\n\nconst VOX_RSS = 'https://vox.com/rss/index.xml';\nconst BBC_RSS = 'http://feeds.bbci.co.uk/news/rss.xml';\nconst BBC_TECHNOLOGY_RSS = 'http://feeds.bbci.co.uk/news/video_and_audio/technology/rss.xml'\nconst BBC_SCIENCE_AND_ENVIROMENT_RSS = 'http://feeds.bbci.co.uk/news/video_and_audio/science_and_environment/rss.xml';\nconst GUARDIAN_WORLD_RSS ='https://www.theguardian.com/world/rss';\nconst GUARDIAN_TOP_RSS = 'https://www.theguardian.com/uk/rss';\nconst WSJ_WORLD_RSS= 'https://feeds.a.dj.com/rss/RSSWorldNews.xml';\nconst WSJ_TECHNOLOGY_RSS = 'https://feeds.a.dj.com/rss/RSSWSJD.xml';\nconst NEWS_UK_RSS = 'https://www.news.co.uk/feed';\nconst BUZZFEED_US_NEWS_RSS = 'https://www.buzzfeed.com/usnews.xml';\nconst QUARTZ_RSS = 'https://qz.com/re/rss';\n\nconst RSS_FEEDS = [\n    { \n      value: VOX_RSS, \n      label: 'Vox'\n    }, \n    { \n      value: BBC_RSS, \n      label: 'BBC'\n    },\n    { \n      value: BBC_TECHNOLOGY_RSS, \n      label: 'BBC - Technology'\n    },\n    { \n      value: BBC_SCIENCE_AND_ENVIROMENT_RSS, \n      label: 'BBC - Science And Enviroment'\n    },\n    { \n      value: GUARDIAN_WORLD_RSS, \n      label: 'Guardian - World'\n    },\n    { \n      value: GUARDIAN_TOP_RSS, \n      label: 'Guardian - Top'\n    },\n    {\n      value: WSJ_WORLD_RSS,\n      label: 'WSJ - World'\n    },\n    {\n      value: WSJ_TECHNOLOGY_RSS,\n      label: 'WSJ - Technology'\n    },\n    {\n      value: NEWS_UK_RSS,\n      label: 'News - UK'\n    },\n    {\n      value: BUZZFEED_US_NEWS_RSS,\n      label: 'Buzz Feed - US News'\n    },\n    {\n      value: QUARTZ_RSS,\n      label: 'Quartz'\n    }\n  ]\n\n\n  module.exports = RSS_FEEDS;","/**\n * async array modified From https://codeburst.io/javascript-async-await-with-foreach-b6ba62bbf404\n */\nconst Parser = require('rss-parser');\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\nlet parser = new Parser();\n\nconst fetchDataFromFeed = async (rssFeedEndPoint) => {\n  return await parser.parseURL(CORS_PROXY + rssFeedEndPoint);\n  // return await parser.parseURL(rssFeedEndPoint);\n};\n\n\nasync function asyncForEach(array, callback) {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n}\n\nexport default async function getDataFromFeed (RSS_FEEDS) {\n  let result = [];\n   await asyncForEach(RSS_FEEDS, async (rssFeed) => {\n    try {\n      let feed = await fetchDataFromFeed(rssFeed.value);\n      const newFeedItems = await feed.items.map((item)=>{ item.display = true; item.brand = feed.title; return item;});\n      result = result.concat(newFeedItems);\n    }\n    catch (e){\n      console.log(`error for ${rssFeed.value}::`, e)\n    }\n  });\n  // console.log('Done', result);\n  return result;\n}\n\n// module.exports = getDataFromFeed;\n\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap-css-only/css/bootstrap.css';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport getDataFromFeed from './load-data/index.js';\n\nconst RSS_FEEDS = require('./load-data/RSS_FEEDS.js');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      feedItems: []\n     };\n  }\n\n  async componentDidMount(){\n    const self = this;\n    const rssFeedData = Promise.resolve(getDataFromFeed(RSS_FEEDS));\n    rssFeedData.then(function(data) {\n      self.setState({\n        feedItems: data, \n        feedTitle: 'feed.title'\n      })\n    }, function(e) {\n      console.error(e); \n    });\n  }\n\n  handleSearch = (e)=>{\n    this.searchRssFeed(e.target.value);\n  }\n\n  searchRssFeed = (searchValue)=>{\n    const rssFeedResults = this.state.feedItems.map((item) => {\n      if (item.title.toLowerCase().includes(searchValue.toLowerCase())\n      || item.contentSnippet.toLowerCase().includes(searchValue.toLowerCase())) {\n        item.display = true;\n\n        return item;\n      } else {\n        item.display = false;\n\n        return item;\n      }\n    });\n\n    this.setState({\n      images: rssFeedResults\n    });\n  }\n\n  render() {\n    const feed = this.state.feedItems.map((item,index)=>{\n      if (item.display) {\n      return (\n        <ListGroup.Item key={item.link+index}>\n          <Row>\n            <Col xl={9} lg={9} md={9} sm={9}  xs={12}>\n              <details>\n                <summary title={item.pubDate}>\n                  <a href= {item.link} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a>\n                </summary>\n                <div dangerouslySetInnerHTML={{__html: item.content}}/>\n                <small className={'text-secondary'}>{item.author}</small>\n              </details>\n            </Col>\n            <Col xl={3} lg={3} md={3} sm={3}  xs={12}>\n              <Badge className={'noselect'} variant=\"dark\">{item.brand}</Badge>\n            </Col>\n          </Row>\n        </ListGroup.Item>\n       )\n      }\n      else {\n        return null;\n      }\n    })\n    return (\n      <Container>\n        <Card>\n        <Card.Header>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\">\n                <FontAwesomeIcon icon={ faSearch } />\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Search news feeds..\"\n              aria-label=\"search\"\n              aria-describedby=\"basic-addon1\"\n              onChange={this.handleSearch}\n            />\n          </InputGroup>\n        </Card.Header>\n        <ListGroup variant=\"flush\" style={{ height: '90vh',overflow: 'auto'}}>\n        {feed}\n        </ListGroup>\n        </Card>\n      </Container>\n      ); \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}