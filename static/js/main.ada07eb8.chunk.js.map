{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Parser","require","RSS_FEEDS","value","label","parser","App","props","handleSearch","e","searchRssFeed","target","searchValue","rssFeedResults","state","feedItems","map","item","title","toLowerCase","includes","contentSnippet","display","setState","images","options","forEach","rssFeed","a","parseURL","feed","newFeedItems","items","brand","updatedFeedItems","concat","feedTitle","this","index","Item","key","link","xl","lg","md","sm","xs","pubDate","href","rel","dangerouslySetInnerHTML","__html","content","className","author","variant","Header","Prepend","Text","id","icon","faSearch","placeholder","aria-label","aria-describedby","onChange","style","height","overflow","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"olBAoBIA,EAASC,EAAQ,KAefC,EAAY,CAChB,CACEC,MAdY,gCAeZC,MAAO,OAET,CACED,MAjBY,uCAkBZC,MAAO,OAET,CACED,MApBuB,kEAqBvBC,MAAO,oBAET,CACED,MAvBmC,+EAwBnCC,MAAO,gCAET,CACED,MA1BsB,wCA2BtBC,MAAO,oBAET,CACED,MA7BqB,qCA8BrBC,MAAO,kBAET,CACED,MAhCiB,8CAiCjBC,MAAO,eAET,CACED,MAnCuB,yCAoCvBC,MAAO,oBAET,CACED,MAtCgB,8BAuChBC,MAAO,aAET,CACED,MAzCyB,sCA0CzBC,MAAO,uBAET,CACED,MA5Ce,wBA6CfC,MAAO,WAIPC,EAAS,IAAIL,EA6IFM,E,YAzIb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,aAAe,SAACC,GACd,EAAKC,cAAcD,EAAEE,OAAOR,QAxBX,EA2BnBO,cAAgB,SAACE,GACf,IAAMC,EAAiB,EAAKC,MAAMC,UAAUC,IAAI,SAACC,GAC/C,OAAIA,EAAKC,MAAMC,cAAcC,SAASR,EAAYO,gBAC/CF,EAAKI,eAAeF,cAAcC,SAASR,EAAYO,gBACxDF,EAAKK,SAAU,EAERL,IAEPA,EAAKK,SAAU,EAERL,KAIX,EAAKM,SAAS,CACZC,OAAQX,KAxCV,EAAKC,MAAQ,CACXC,UAAW,GACXU,QAASvB,GAJM,E,oMAUjBA,EAAUwB,QAAV,sCAAmB,WAAOC,GAAP,qBAAAC,EAAA,qEAEAvB,EAAOwB,SAASF,EAAQxB,OAFxB,OAEb2B,EAFa,OAGTf,EAAc,EAAKD,MAAnBC,UACFgB,EAAeD,EAAKE,MAAMhB,IAAI,SAACC,GAAuD,OAA9CA,EAAKK,SAAU,EAAML,EAAKgB,MAAQH,EAAKZ,MAAcD,IAC7FiB,EAAmBnB,EAAUoB,OAAOJ,GAC1C,EAAKR,SAAS,CACZR,UAAWmB,EACXE,UAAWN,EAAKZ,QARD,yCAAnB,uD,8HA+DA,IAAMY,EAAOO,KAAKvB,MAAMC,UAAUC,IAAI,SAACC,EAAKqB,GAC1C,OAAIrB,EAAKK,QAEP,kBAAC,IAAUiB,KAAX,CAAgBC,IAAKvB,EAAKwB,KAAKH,GAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAIC,GAAI,IACpC,iCACE,6BAAS5B,MAAOD,EAAK8B,SACnB,uBAAGC,KAAO/B,EAAKwB,KAAM9B,OAAO,SAASsC,IAAI,uBAAuBhC,EAAKC,QAEvE,yBAAKgC,wBAAyB,CAACC,OAAQlC,EAAKmC,WAC5C,2BAAOC,UAAW,kBAAmBpC,EAAKqC,UAG9C,kBAAC,IAAD,CAAKZ,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAIC,GAAI,IACpC,kBAAC,IAAD,CAAOO,UAAW,WAAYE,QAAQ,QAAQtC,EAAKgB,UAOlD,OAGX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEA,kBAAC,IAAKuB,OAAN,KACE,kBAAC,IAAD,CAAYH,UAAU,QACpB,kBAAC,IAAWI,QAAZ,KACE,kBAAC,IAAWC,KAAZ,CAAiBC,GAAG,gBAClB,kBAAC,IAAD,CAAiBC,KAAOC,QAG5B,kBAAC,IAAD,CACEC,YAAY,sBACZC,aAAW,SACXC,mBAAiB,eACjBC,SAAU5B,KAAK7B,iBAarB,kBAAC,IAAD,CAAW+C,QAAQ,QAAQW,MAAO,CAAEC,OAAQ,OAAOC,SAAU,SAE5DtC,S,GAjISuC,IAAMC,WCzEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ada07eb8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap-css-only/css/bootstrap.css';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Button from 'react-bootstrap/Button';\nimport Select from 'react-select';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\n\nlet Parser = require('rss-parser');\n// longer list of feeds\n// https://blog.feedspot.com/uk_news_rss_feeds/\nconst VOX_RSS = 'https://vox.com/rss/index.xml';\nconst BBC_RSS = 'http://feeds.bbci.co.uk/news/rss.xml';\nconst BBC_TECHNOLOGY_RSS = 'http://feeds.bbci.co.uk/news/video_and_audio/technology/rss.xml'\nconst BBC_SCIENCE_AND_ENVIROMENT_RSS = 'http://feeds.bbci.co.uk/news/video_and_audio/science_and_environment/rss.xml';\nconst GUARDIAN_WORLD_RSS ='https://www.theguardian.com/world/rss';\nconst GUARDIAN_TOP_RSS = 'https://www.theguardian.com/uk/rss';\nconst WSJ_WORLD_RSS= 'https://feeds.a.dj.com/rss/RSSWorldNews.xml';\nconst WSJ_TECHNOLOGY_RSS = 'https://feeds.a.dj.com/rss/RSSWSJD.xml';\nconst NEWS_UK_RSS = 'https://www.news.co.uk/feed';\nconst BUZZFEED_US_NEWS_RSS = 'https://www.buzzfeed.com/usnews.xml';\nconst QUARTZ_RSS = 'https://qz.com/re/rss';\n\nconst RSS_FEEDS = [\n  { \n    value: VOX_RSS, \n    label: 'Vox'\n  }, \n  { \n    value: BBC_RSS, \n    label: 'BBC'\n  },\n  { \n    value: BBC_TECHNOLOGY_RSS, \n    label: 'BBC - Technology'\n  },\n  { \n    value: BBC_SCIENCE_AND_ENVIROMENT_RSS, \n    label: 'BBC - Science And Enviroment'\n  },\n  { \n    value: GUARDIAN_WORLD_RSS, \n    label: 'Guardian - World'\n  },\n  { \n    value: GUARDIAN_TOP_RSS, \n    label: 'Guardian - Top'\n  },\n  {\n    value: WSJ_WORLD_RSS,\n    label: 'WSJ - World'\n  },\n  {\n    value: WSJ_TECHNOLOGY_RSS,\n    label: 'WSJ - Technology'\n  },\n  {\n    value: NEWS_UK_RSS,\n    label: 'News - UK'\n  },\n  {\n    value: BUZZFEED_US_NEWS_RSS,\n    label: 'Buzz Feed - US News'\n  },\n  {\n    value: QUARTZ_RSS,\n    label: 'Quartz'\n  }\n]\n\nlet parser = new Parser();\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      feedItems: [],\n      options: RSS_FEEDS\n     };\n  }\n\n\n  async componentDidMount(){\n    RSS_FEEDS.forEach( async (rssFeed)=>{\n      // let feed = await parser.parseURL(CORS_PROXY + rssFeed.value);\n      let feed = await parser.parseURL(rssFeed.value);\n      const { feedItems } = this.state;\n      const newFeedItems = feed.items.map((item)=>{ item.display = true; item.brand = feed.title; return item;});\n      const updatedFeedItems = feedItems.concat(newFeedItems);\n      this.setState({\n        feedItems: updatedFeedItems, \n        feedTitle: feed.title\n      })\n    })\n  }\n\n  handleSearch = (e)=>{\n    this.searchRssFeed(e.target.value);\n  }\n\n  searchRssFeed = (searchValue)=>{\n    const rssFeedResults = this.state.feedItems.map((item) => {\n      if (item.title.toLowerCase().includes(searchValue.toLowerCase())\n      || item.contentSnippet.toLowerCase().includes(searchValue.toLowerCase())) {\n        item.display = true;\n\n        return item;\n      } else {\n        item.display = false;\n\n        return item;\n      }\n    });\n\n    this.setState({\n      images: rssFeedResults\n    });\n  }\n\n  // filterRssFeed = (brandValue)=>{\n  //   const rssFeedResults = this.state.feedItems.map((item) => {\n  //     if (item.brand.toLowerCase().includes(brandValue.toLowerCase())) {\n  //       item.display = true;\n\n  //       return item;\n  //     } else {\n  //       item.display = false;\n\n  //       return item;\n  //     }\n  //   });\n\n  //   this.setState({\n  //     images: rssFeedResults\n  //   });\n  // }\n\n  // handleSelectChange = selectedOption => {\n  //   console.log(`Option selected:`, selectedOption)\n  //   if(selectedOption){\n  //     this.setState({ selectedOption });\n  //     this.filterRssFeed(selectedOption[0].label);\n  //   }\n  // };\n\n  render() {\n    const feed = this.state.feedItems.map((item,index)=>{\n      if (item.display) {\n      return (\n        <ListGroup.Item key={item.link+index}>\n          <Row>\n            <Col xl={9} lg={9} md={9} sm={9}  xs={12}>\n              <details>\n                <summary title={item.pubDate}>\n                  <a href= {item.link} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a>\n                </summary>\n                <div dangerouslySetInnerHTML={{__html: item.content}}/>\n                <small className={'text-secondary'}>{item.author}</small>\n              </details>\n            </Col>\n            <Col xl={3} lg={3} md={3} sm={3}  xs={12}>\n              <Badge className={'noselect'} variant=\"dark\">{item.brand}</Badge>\n            </Col>\n          </Row>\n        </ListGroup.Item>\n       )\n      }\n      else {\n        return null;\n      }\n    })\n    return (\n      <Container>\n        <Card>\n        {/* <Card.Header>{this.state.feedTitle}</Card.Header> */}\n        <Card.Header>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\">\n                <FontAwesomeIcon icon={ faSearch } />\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Search news feeds..\"\n              aria-label=\"search\"\n              aria-describedby=\"basic-addon1\"\n              onChange={this.handleSearch}\n            />\n          </InputGroup>\n        </Card.Header>\n        {/* <Card.Header>\n            <Select\n            isClearable\n            isMulti\n            value={this.state.selectedOption? this.state.selectedOption : '' }\n            onChange={this.handleSelectChange}\n            options={this.state.options}\n          />\n        </Card.Header> */}\n        <ListGroup variant=\"flush\" style={{ height: '90vh',overflow: 'auto'}}>\n        {/* <ListGroup> */}\n        {feed}\n        {/* </ListGroup> */}\n        </ListGroup>\n        </Card>\n      </Container>\n      ); \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}